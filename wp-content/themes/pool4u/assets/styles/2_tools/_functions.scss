@use "sass:math";
/*
	oooooooooooo                                       .    o8o
	`888'     `8                                     .o8    `"'
	 888         oooo  oooo  ooo. .oo.    .ooooo.  .o888oo oooo   .ooooo.  ooo. .oo.    .oooo.o
	 888oooo8    `888  `888  `888P"Y88b  d88' `"Y8   888   `888  d88' `88b `888P"Y88b  d88(  "8
	 888    "     888   888   888   888  888         888    888  888   888  888   888  `"Y88b.
	 888          888   888   888   888  888   .o8   888 .  888  888   888  888   888  o.  )88b
	o888o         `V88V"V8P' o888o o888o `Y8bod8P'   "888" o888o `Y8bod8P' o888o o888o 8""888P'
 */


/**
 * Math helpers
 *
 * Returns rounded integers
 */
@function quarter($number) {
	@return round($number * .25);
}

@function half($number) {
	@return round($number * .5);
}

@function double($number) {
	@return round($number * 2);
}

@function quad($number) {
	@return round($number * 4);
}

@function svg-url($svg) {
    //
    //  Add missing namespace
    //
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);

        //   Encode
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
        str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
        $string);
}
